{"ast":null,"code":"var _jsxFileName = \"/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik';\nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateAccount() {\n  _s();\n\n  const {\n    user\n  } = useContext(UserContext);\n  const [usersList, setUsersList] = useState(user);\n  const [elementNum, setElementNum] = useState(2);\n\n  function indexNum() {\n    let newIndex = elementNum + 1;\n    setElementNum(newIndex);\n    console.log(elementNum);\n  }\n\n  ;\n  const validate = Yup.object({\n    name: Yup.string().required('Required'),\n    email: Yup.string().email('Write in email format').required('Email is required'),\n    password: Yup.string().min(8, 'Must be at least 8 characters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], \"Confirm same Password\").required('Confirm password required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    txtcolor: \"black\",\n    header: \"Create An Account\",\n    title: \"Fill in the following information\",\n    body: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: \"\",\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        },\n        validationSchema: validate,\n        onSubmit: (values, {\n          resetForm\n        }, {\n          indexNum\n        }) => {\n          //console.log(values);\n          indexNum();\n          setUsersList(usersList.push(values)); //console.log(usersList);\n\n          resetForm({\n            values: \"\"\n          });\n        },\n        children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Name\",\n              name: \"name\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email\",\n              name: \"email\",\n              type: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Password\",\n              name: \"password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Confirm Password\",\n              name: \"confirmPassword\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-dark mt-5\",\n              type: \"submit\",\n              disabled: !formik.isValid || formik.isSubmitting,\n              children: \"Create Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccount, \"1pr5hSuaIzaDKnvneLWkAOCyjyk=\");\n\n_c = CreateAccount;\nexport { CreateAccount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx"],"names":["React","useContext","useState","UserContext","Card","Formik","Form","TextField","Yup","CreateAccount","user","usersList","setUsersList","elementNum","setElementNum","indexNum","newIndex","console","log","validate","object","name","string","required","email","password","min","confirmPassword","oneOf","ref","values","resetForm","push","formik","isValid","isSubmitting"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAWT,UAAU,CAACE,WAAD,CAA3B;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAACQ,IAAD,CAA1C;AAEA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;;AAEA,WAASa,QAAT,GAAmB;AACf,QAAIC,QAAQ,GAAGH,UAAU,GAAG,CAA5B;AACAC,IAAAA,aAAa,CAACE,QAAD,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACH;;AAAA;AAGD,QAAMM,QAAQ,GAAGX,GAAG,CAACY,MAAJ,CAAW;AACxBC,IAAAA,IAAI,EAAEb,GAAG,CAACc,MAAJ,GACDC,QADC,CACQ,UADR,CADkB;AAIxBC,IAAAA,KAAK,EAAEhB,GAAG,CAACc,MAAJ,GAAaE,KAAb,CAAmB,uBAAnB,EACFD,QADE,CACO,mBADP,CAJiB;AAQxBE,IAAAA,QAAQ,EAAEjB,GAAG,CAACc,MAAJ,GACLI,GADK,CACD,CADC,EACE,+BADF,EAELH,QAFK,CAEI,sBAFJ,CARc;AAYxBI,IAAAA,eAAe,EAAEnB,GAAG,CAACc,MAAJ,GACZM,KADY,CACN,CAACpB,GAAG,CAACqB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADM,EACuB,uBADvB,EAEZN,QAFY,CAEH,2BAFG;AAZO,GAAX,CAAjB;AAkBA,sBACI,QAAC,IAAD;AACI,IAAA,QAAQ,EAAC,OADb;AAEI,IAAA,MAAM,EAAC,mBAFX;AAGI,IAAA,KAAK,EAAC,mCAHV;AAII,IAAA,IAAI,eACA;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,aAAa,EAAE;AACXF,UAAAA,IAAI,EAAE,EADK;AAEXG,UAAAA,KAAK,EAAE,EAFI;AAGXC,UAAAA,QAAQ,EAAE,EAHC;AAIXE,UAAAA,eAAe,EAAC;AAJL,SADnB;AAOI,QAAA,gBAAgB,EAAER,QAPtB;AAQI,QAAA,QAAQ,EAAE,CAACW,MAAD,EAAS;AAACC,UAAAA;AAAD,SAAT,EAAsB;AAAChB,UAAAA;AAAD,SAAtB,KAAqC;AAC3C;AACAA,UAAAA,QAAQ;AACRH,UAAAA,YAAY,CAACD,SAAS,CAACqB,IAAV,CAAeF,MAAf,CAAD,CAAZ,CAH2C,CAI3C;;AACAC,UAAAA,SAAS,CAAC;AAACD,YAAAA,MAAM,EAAE;AAAT,WAAD,CAAT;AAEH,SAfL;AAAA,kBAiBMG,MAAM,iBACJ;AAAA,iCAEI,QAAC,IAAD;AAAA,oCACI,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAwB,cAAA,IAAI,EAAC,MAA7B;AAAoC,cAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,OAAjB;AAAyB,cAAA,IAAI,EAAC,OAA9B;AAAsC,cAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,UAAjB;AAA4B,cAAA,IAAI,EAAC,UAAjC;AAA4C,cAAA,IAAI,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,kBAAjB;AAAoC,cAAA,IAAI,EAAC,iBAAzC;AAA2D,cAAA,IAAI,EAAC;AAAhE;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAMI;AAAQ,cAAA,SAAS,EAAC,mBAAlB;AAAsC,cAAA,IAAI,EAAC,QAA3C;AAAoD,cAAA,QAAQ,EAAE,CAACA,MAAM,CAACC,OAAR,IAAmBD,MAAM,CAACE,YAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAlBR;AAAA;AAAA;AAAA;AAAA;AADJ;AALR;AAAA;AAAA;AAAA;AAAA,UADJ;AA+CH;;GA/EQ1B,a;;KAAAA,a;AAkFT,SAASA,aAAT","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik'; \nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\n\nfunction CreateAccount() {\n    const { user } = useContext(UserContext);\n\n    const [usersList, setUsersList] = useState(user);\n\n    const [elementNum, setElementNum] = useState(2);\n\n    function indexNum(){\n        let newIndex = elementNum + 1;\n        setElementNum(newIndex);\n        console.log(elementNum);\n    };\n\n    \n    const validate = Yup.object({\n        name: Yup.string()\n            .required('Required'),\n        \n        email: Yup.string().email('Write in email format')\n            .required('Email is required'),\n            \n\n        password: Yup.string()\n            .min(8, 'Must be at least 8 characters')\n            .required('Password is required'),\n\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], \"Confirm same Password\")\n            .required('Confirm password required'),\n    });\n    \n\n    return(\n        <Card\n            txtcolor=\"black\"\n            header=\"Create An Account\"\n            title=\"Fill in the following information\"\n            body={(\n                <>\n                    <Formik\n                        initialValues={{\n                            name: \"\",\n                            email: \"\",\n                            password: \"\",\n                            confirmPassword:\"\"\n                        }}\n                        validationSchema={validate}\n                        onSubmit={(values, {resetForm}, {indexNum}) => {\n                            //console.log(values);\n                            indexNum();\n                            setUsersList(usersList.push(values));\n                            //console.log(usersList);\n                            resetForm({values: \"\"});\n                            \n                        }}\n                    >\n                        { formik => (\n                            <div>\n                               \n                                <Form>\n                                    <TextField label=\"Name\" name=\"name\" type=\"text\"  />\n                                    <TextField label=\"Email\" name=\"email\" type=\"email\" />\n                                    <TextField label=\"Password\" name=\"password\" type=\"password\" />\n                                    <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\"/>\n                                    \n                                    <button className=\"btn btn-dark mt-5\" type=\"submit\" disabled={!formik.isValid || formik.isSubmitting} >Create Account</button>\n                                </Form>\n                            </div>\n                        )\n\n                        }\n                    </Formik>\n\n                </>\n            )}\n        />\n\n        \n    );\n}\n\n\nexport { CreateAccount };"]},"metadata":{},"sourceType":"module"}