{"ast":null,"code":"var _jsxFileName = \"/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik';\nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\nimport { v4 as uuidv4 } from 'uuid';\nimport users from \"../Data/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateAccount() {\n  _s();\n\n  const {\n    user\n  } = useContext(UserContext);\n  const [newUsers, setNewUsers] = useState(users);\n  const [show, setShow] = useState(true);\n  const validate = Yup.object({\n    name: Yup.string().required('Required'),\n    email: Yup.string().email('Write in email format').required('Email is required'),\n    password: Yup.string().min(8, 'Must be at least 8 characters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], \"Confirm same Password\").required('Confirm password required')\n  });\n\n  const addUser = user => {\n    setNewUsers([...newUsers, { ...user\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col align-self-center\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          bgcolor: \"info\",\n          header: \"Create An Account\",\n          title: \"Fill in the following information\",\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: {\n                name: \"\",\n                email: \"\",\n                password: \"\",\n                confirmPassword: \"\"\n              },\n              validationSchema: validate,\n              onSubmit: (values, {\n                resetForm\n              }) => {\n                //console.log(values);  \n                //setUsersList(usersList.push({\n                //    id: uuidv4(),\n                //    ...values\n                //}\n                //    ));\n                addUser({\n                  id: uuidv4(),\n                  ...values\n                });\n                console.log(users);\n                user.push(newUsers);\n                resetForm({\n                  values: \"\"\n                });\n              },\n              children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Name\",\n                    name: \"name\",\n                    type: \"text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Email\",\n                    name: \"email\",\n                    type: \"email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Password\",\n                    name: \"password\",\n                    type: \"password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Confirm Password\",\n                    name: \"confirmPassword\",\n                    type: \"password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-secondary mt-5\",\n                    type: \"submit\",\n                    disabled: !formik.isValid || formik.isSubmitting,\n                    children: \"Create Account\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccount, \"qQ1NTtkQEmb2xyjW/OLqJjjzvQU=\");\n\n_c = CreateAccount;\nexport { CreateAccount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx"],"names":["React","useContext","useState","UserContext","Card","Formik","Form","TextField","Yup","v4","uuidv4","users","CreateAccount","user","newUsers","setNewUsers","show","setShow","validate","object","name","string","required","email","password","min","confirmPassword","oneOf","ref","addUser","values","resetForm","id","console","log","push","formik","isValid","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik'; \nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport users from \"../Data/users\";\n\n\nfunction CreateAccount() {\n    const { user } = useContext(UserContext);\n\n    const [newUsers, setNewUsers] = useState(users);\n    const [show, setShow] = useState(true);\n    \n    const validate = Yup.object({\n        name: Yup.string()\n            .required('Required'),\n        \n        email: Yup.string().email('Write in email format')\n            .required('Email is required'),\n            \n\n        password: Yup.string()\n            .min(8, 'Must be at least 8 characters')\n            .required('Password is required'),\n\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], \"Confirm same Password\")\n            .required('Confirm password required'),\n    });\n    \n    const addUser = (user) => {\n        setNewUsers([...newUsers, { ...user}])\n    }\n\n    return(\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col align-self-center\">\n                    <Card\n                        bgcolor=\"info\"\n                        header=\"Create An Account\"\n                        title=\"Fill in the following information\"\n                        body={\n                             (\n                            <>\n                                <Formik\n                                    initialValues={{\n                                        name: \"\",\n                                        email: \"\",\n                                        password: \"\",\n                                        confirmPassword:\"\"\n                                    }}\n                                    validationSchema={validate}\n                                    onSubmit={(values, {resetForm}) => {\n                                        //console.log(values);  \n                                        //setUsersList(usersList.push({\n                                        //    id: uuidv4(),\n                                        //    ...values\n                                        //}\n                                        //    ));\n                                        addUser({\n                                            id: uuidv4(),\n                                            ...values\n                                        });\n                                        console.log(users);\n                                        user.push(newUsers);\n                                        \n                                        resetForm({values: \"\"});\n                                        \n                                    }}\n                                >\n                                    { formik => (\n                                        <div>\n                                        \n                                            <Form>\n                                                <TextField label=\"Name\" name=\"name\" type=\"text\"  />\n                                                <TextField label=\"Email\" name=\"email\" type=\"email\" />\n                                                <TextField label=\"Password\" name=\"password\" type=\"password\" />\n                                                <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\"/>\n                                                \n                                                <button className=\"btn btn-secondary mt-5\" type=\"submit\" disabled={!formik.isValid || formik.isSubmitting}>Create Account</button>\n                                            </Form>\n                                        </div>\n                                    )\n\n                                    }\n                                </Formik>\n\n                            </>\n                        )}\n                    />\n                </div>\n            </div>\n        </div>\n        \n    );\n}\n\n\nexport { CreateAccount };"]},"metadata":{},"sourceType":"module"}