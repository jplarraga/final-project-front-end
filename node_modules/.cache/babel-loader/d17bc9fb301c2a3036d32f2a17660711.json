{"ast":null,"code":"var _jsxFileName = \"/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik';\nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateAccount() {\n  _s();\n\n  const {\n    user\n  } = useContext(UserContext);\n  const [usersList, setUsersList] = useState(user);\n  const validate = Yup.object({\n    name: Yup.string().required('Required'),\n    email: Yup.string().email('Write in email format').required('Email is required'),\n    password: Yup.string().min(8, 'Must be at least 8 characters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], \"Confirm same Password\").required('Confirm password required')\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      bgcolor: \"info\",\n      header: \"Create An Account\",\n      title: \"Fill in the following information\",\n      body: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\"\n          },\n          validationSchema: validate,\n          onSubmit: (values, {\n            resetForm\n          }) => {\n            //console.log(values);\n            setUsersList(usersList.push({\n              id: uuidv4(),\n              ...values\n            })); //console.log(usersList);\n\n            resetForm({\n              values: \"\"\n            });\n          },\n          children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Name\",\n                name: \"name\",\n                type: \"text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Email\",\n                name: \"email\",\n                type: \"email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Password\",\n                name: \"password\",\n                type: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Confirm Password\",\n                name: \"confirmPassword\",\n                type: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-secondary mt-5\",\n                type: \"submit\",\n                disabled: !formik.isValid || formik.isSubmitting,\n                children: \"Create Account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccount, \"Po62UgszIAuTIthFOOpDPLRVt9s=\");\n\n_c = CreateAccount;\nexport { CreateAccount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/usuario/Desktop/CURSO_MERN/Proyecto Front End Banking Application/Banking_Application/banking-application/src/components/Main/createaccount.jsx"],"names":["React","useContext","useState","UserContext","Card","Formik","Form","TextField","Yup","v4","uuidv4","CreateAccount","user","usersList","setUsersList","validate","object","name","string","required","email","password","min","confirmPassword","oneOf","ref","values","resetForm","push","id","formik","isValid","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport UserContext from \"../Context/UserContext\";\nimport { Card } from '../Card/card';\nimport { Formik, Form } from 'formik'; \nimport { TextField } from '../TextField/textfield';\nimport * as Yup from 'yup';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction CreateAccount() {\n    const { user } = useContext(UserContext);\n\n    const [usersList, setUsersList] = useState(user);\n\n    \n    const validate = Yup.object({\n        name: Yup.string()\n            .required('Required'),\n        \n        email: Yup.string().email('Write in email format')\n            .required('Email is required'),\n            \n\n        password: Yup.string()\n            .min(8, 'Must be at least 8 characters')\n            .required('Password is required'),\n\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], \"Confirm same Password\")\n            .required('Confirm password required'),\n    });\n    \n\n    return(\n        <div className=\"container-fluid\">\n            <Card\n                bgcolor=\"info\"\n                header=\"Create An Account\"\n                title=\"Fill in the following information\"\n                body={(\n                    <>\n                        <Formik\n                            initialValues={{\n                                name: \"\",\n                                email: \"\",\n                                password: \"\",\n                                confirmPassword:\"\"\n                            }}\n                            validationSchema={validate}\n                            onSubmit={(values, {resetForm}) => {\n                                //console.log(values);\n                                \n                                setUsersList(usersList.push({\n                                    id: uuidv4(),\n                                    ...values\n                                }\n                                    ));\n                                //console.log(usersList);\n                                resetForm({values: \"\"});\n                                \n                            }}\n                        >\n                            { formik => (\n                                <div>\n                                \n                                    <Form>\n                                        <TextField label=\"Name\" name=\"name\" type=\"text\"  />\n                                        <TextField label=\"Email\" name=\"email\" type=\"email\" />\n                                        <TextField label=\"Password\" name=\"password\" type=\"password\" />\n                                        <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\"/>\n                                        \n                                        <button className=\"btn btn-secondary mt-5\" type=\"submit\" disabled={!formik.isValid || formik.isSubmitting} >Create Account</button>\n                                    </Form>\n                                </div>\n                            )\n\n                            }\n                        </Formik>\n\n                    </>\n                )}\n            />\n        </div>\n        \n    );\n}\n\n\nexport { CreateAccount };"]},"metadata":{},"sourceType":"module"}